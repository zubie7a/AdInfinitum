Santiago Zubieta
2011/12/14

-> /bin    // .class files
-> /src    // Source code, which I kindly commented for people to see :-)

-> 'Ad Infinitum (WAGE).jar'     // Runnable File

-------

Some days ago I remembered a programming problem I solved some time ago (http://www.spoj.pl/problems/WAGE/) which has a grid filled of elements with 3 possible values that 'eat' each other (sort of like Rock > Scissors, Scissors > Paper, Pape > Rock)

Then I thought about doing the same with colors (as seen in this video I made of the earliest development of the program) http://www.youtube.com/watch?v=ePvE9wFL-Rw (Using a grid of elements with 3 possible colors) the chaotic looks happen because I added something 'random' for the fun of it: When a 'strong' cell battles a 'weak' one, the 'weak' one has a 50% chance of survival.

Then I showed it to a friend and told me it had a lot to do with 'Cellular Automata' so I decided I'd look for videos on the matter, then stumbled upon the beautiful video of a application in YouTube, this one http://www.youtube.com/watch?v=Ue3L29HeD7E . 

I wondered a lot "How the hell can I reach that linear state?!" and I first realized it was the "random" chance of survival I was using. By removing it, my grid "looped" but it was pretty unnoticeable (not beautiful!) then I thought "It has to do with having lots of colors" and then I added up to 9 colors, and voila! I got the linear cyclic pattern!

Then I decided to add again the "random" chance of survival, again just for the fun of it, and I realized that with a lot of colors, some pretty cool sort-of-circular but not 100% cyclic spirals started to form.

I liked a lot the results, so I ended up deciding I'll research even more on these things!

Sadly my application runs at most at a 150x150 grid, each square occupying 2 square pixels, because going beyond that (like a 300x300 grid, each square with 1x1 pixel to maintain ratio) lags the hell out of the application (Maybe it has to do with using JAVA, but surely its my poor programming skills when trying to make things efficient hehehe still got 
LOTS of stuff to learn)

Here is the .jar of my application in case you want to check it out (it allows you to choose between 1 and 9 colors, pause the process, check whats the population for each color, and even a checkbox (which can be dynamically turned ON or OFF) to enable or disable the "chaos" or "chance for a particle to survive an encounter" (which by default is 50%)).

There is also a display for how much time has passed since the simulation started, and a option to see what the population of cells is for each state or color in the grid (Some people who love statistics get crazy over that)

With the 'chaos' turned off, the simulation reaches a locked-up cyclic pattern known as 'Demons of the Cyclic Space' no matter how random is the initial state of the random 'debris' (though it surely affects the area of each of the resulting 'demons' but nonetheless won't prevent them from forming)

With the 'chaos' turned on, the simulation never reaches a complete pattern, instead, it looks more organic, or in other words 'natural', it may form some kind of spirals, and the different colors tend to dissipate like if they were some sort of liquid fluid or smoke. 

Here is more information about these Cellular Automata Cyclic Spaces...
http://en.wikipedia.org/wiki/Cyclic_cellular_automaton

The more colors you use the best it looks!
